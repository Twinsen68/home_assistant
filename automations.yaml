- alias: Backup HA Configuration Files
  id: backup_config_files
  trigger:
    platform: time_pattern
    hours: 1
    minutes: 1
    seconds: 0 
  condition:
    condition: time
    weekday:
      - wed
  action:
    - service: shell_command.backup_configuration

#Set Theme
- alias: 'Set Theme to Midnight'
  initial_state: 'on'
  trigger:
  - platform: homeassistant
    event: start
  action:
  - service: frontend.set_theme
    data:
      name: midnight

- alias: Occupancy On
  hide_entity: true
  trigger:
    - platform: state
      entity_id: binary_sensor.people_home
      from: "off"
      to: "on"
  action:
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.occupancy

- alias: Occupancy Off
  hide_entity: true
  trigger:
    - platform: state
      entity_id: binary_sensor.people_home
      from: "on"
      to: "off"
  action:
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.occupancy

- alias: Turn Off Lights on Leaving Home Zone
  id: gabe_out_of_home_zone_lights_off
  trigger:
#    - platform: state
#      entity_id: device_tracker.huawei_mate_9_92528f2b1a5
#      from: 'home'
#      to: 'not_home'
    - platform: state
      entity_id: binary_sensor.people_home
      from: 'on'
      to: 'off'
      for:
          hours: 0
          minutes: 15
          seconds: 0
    - platform: numeric_state
      entity_id: sensor.home_occupancy_confidence
      below: 51
      for:
          hours: 0
          minutes: 15
          seconds: 0
  action:
    - service: light.turn_off
      entity_id: 
        - light.bedroom_desk
        - light.bedside_table
        - light.desk
        - light.entry_light
        - light.kitchen
        - light.kitchen_2
        - light.table
    - service: input_select.select_option
      data_template:
        entity_id: input_select.alexa_bedroom_ac
        option: "85"
    - service: input_select.select_option
      data_template:
        entity_id: input_select.alexa_livingroom_ac
        option: "85"

- alias: Turn On Lights on Enter Home Zone
  id: gabe_arrive_in_home_zone_lights_on
  trigger:
#    - platform: zone
#      entity_id: device_tracker.5re0217120001465
#      zone: zone.home
#      event: enter
#    - platform: zone
#      entity_id: device_tracker.huawei_mate_9_92528f2b1a5
#      zone: zone.home
#      event: enter
    - platform: state
      entity_id: binary_sensor.people_home
      from: 'off'
      to: 'on'
  action:
    - service: light.turn_on
      entity_id: light.entry_light
    - service: climate.set_temperature
      data:
        entity_id: climate.bedroom_therm
        temperature: 74
    - service: climate.set_temperature
      data:
        entity_id: climate.living_room_therm
        temperature: 75
    - service: script.turn_on
      entity_id: script.welcome_lights_on

- alias: Welcome on Enter Home Zone
  id: gabe_arrive_in_home_zone_welcome
  trigger:
    - platform: state
      entity_id: binary_sensor.people_home
      to: 'on'
#  condition:
#    - condition: state
#      entity_id: input_select.gabe_status_dropdown
#      state: "Just Arrived"
#    condition: template
#    value_template: '{{ as_timestamp(now()) - as_timestamp(states.automation.gabe_arrive_in_home_zone_welcome.attributes.last_triggered) | int > 10800 }}'
  action:
    - service: script.janet_speech_engine
      data:
        call_greeting_gabe: 1
    - service: script.turn_on
      entity_id: script.thundercloud_celebrate

- alias: Mom welcome
  id: mom_arrive_in_home_zone_welcome
  trigger:
    - platform: zone
      entity_id: person.berny
      zone: zone.home
      event: enter
#  condition:
#    condition: template
#    value_template: '{{ as_timestamp(now()) - as_timestamp(states.automation.mom_arrive_in_home_zone_welcome.attributes.last_triggered) | int > 10800 }}'
  action:
    - service: script.janet_speech_engine
      data:
        call_greeting_berny: 1
    - service: script.turn_on
      entity_id: script.thundercloud_celebrate

#Morning Greeting
- alias: 'Morning Greeting'
  id: morning_greeting_update
  trigger:
    platform: state
    entity_id: input_boolean.bed_occupancy
    from: 'on'
    to: 'off'
  condition:
    condition: and
    conditions:
      - condition: time
        before: '10:30:00'
        after: '07:30:00'
      - condition: state
        entity_id: input_boolean.alarm_went_off
        state: 'on'
      - condition: template
        value_template: '{{ as_timestamp(now()) - as_timestamp(states.automation.morning_greeting.attributes.last_triggered) | int > 10800 }}'
  action:
    - service: script.turn_on
      entity_id: script.kiosk_good_morning

#Download News once a day
- alias: 'download_npr_news'
  trigger:
    - platform: time
      at: '06:16:00'
  action:
    - service: downloader.download_file
      data_template:
        url: "{{ states('sensor.npr_news_mp3_link') }}"
        filename: "npr_news.mp3"
        overwrite: true

#Dim Kiosk with light
- alias: 'Dim Kiosk Screen'
  id: dim_kiosk_screen
  trigger:
    platform: state
    entity_id: light.entry_light
    from: 'on'
    to: 'off'
  action:
    - service: rest_command.kiosk_screen_dim

#Bright Kiosk with light
- alias: 'Brighten Kiosk Screen'
  id: brihten_kiosk_screen
  trigger:
    platform: state
    entity_id: light.entry_light
    from: 'off'
    to: 'on'
  action:
    - service: rest_command.kiosk_screen_mid

- alias: Turn off kiosk charger
  trigger:
    platform: template
    value_template: "{{ 80 < states.light.dashboard_screen.attributes.battery_level }}"
  action:
    service: switch.turn_off
    entity_id: switch.2437254184f3eb69e784

- alias: Turn on kiosk charger
  trigger:
    platform: template
    value_template: "{{ 20 > states.light.dashboard_screen.attributes.battery_level }}"
  action:
    service: switch.turn_on
    entity_id: switch.2437254184f3eb69e784

#- alias: Home Assistant Start
#  trigger:
#    platform: homeassistant
#    event: start 
#  action:
#    - delay: '00:00:10'
#    - service: notify.kiosk
#      data:
#        message: 'Home Assistant has started'

- alias: Start Up
  trigger:
    - event: start
      platform: homeassistant    
  action:
    - delay: '00:00:10'  
#    - wait_template: "{{ not is_state( media_player.kiosk_speaker, 'playing') }}"
#      timeout: 00:00:10
    - service: rest_command.kiosk_sound_battle
    - service: notify.html5_push
      data:
        data:
          renotify: 1
          icon: LOCALHOST_URL/local/icons/smarthome.png
          badge: LOCALHOST_URL/local/icons/badge_smarthome.png
          timestamp: '%m'
          url: LOCALHOST_URL
          vibrate: 700, 700, 700
        message: "Home Assistant restarted at {{ as_timestamp(now()) | timestamp_custom('%H:%M', true) }}"
        title: "Hello World!"
        target:
          - "Gabes Mate"
          - "Macbook"
    - delay:
        seconds: 6
    - service: notify.kiosk
      data:
        message: 'Home Assistant has started'
    - delay:
        seconds: 5  
    - service: script.janet_speech_engine
      data:
        call_introduction: 1 
    - delay:
        seconds: 10  
    - service: alexa_media.update_last_called 
    - delay:
        seconds: 5
    - service: script.turn_on
      entity_id: script.alexa_connect_to_speaker
    - delay:
        seconds: 5
    - service: notify.alexa_media
      data:
        data:
          type: tts
        target: 
          - media_player.gabe_s_alexa
        message:  'Alexa Tee Tee Ess is Connected'

#SSL Expiry
- alias: ssl_expiry_notify
  trigger:
    platform: numeric_state
    entity_id: sensor.ssl_certificate_expiry
    below: 2
  condition:
    condition: time
    after: '13:00:00'
  action:
    - service: notify.html5_push
      data:
        data:
          renotify: 1
          icon: LOCALHOST_URL/local/icons/ssl.png
          badge: LOCALHOST_URL/local/icons/badge_calendar.png
          timestamp: '%m'
          url: LOCALHOST_URL/lovelace/10
          vibrate: 700, 700, 700
        message: "Your SSL cert expires in {{ states.sensor.ssl_certificate_expiry.state }} days."
        title: "Beep! Boop!"
        target:
          - "Gabes Mate"
          - "Macbook"
    - service: script.janet_speech_engine
      data:
        message: "Hey Gabe, I just want to let you know that your website SSL certificate expires in {{ states.sensor.ssl_certificate_expiry.state }} days. You have instructions on how to renew it saved in your evernote app."
    - service: persistent_notification.create
      data:
        message: "Your SSL cert expires in {{ states.sensor.ssl_certificate_expiry.state }} days."
        title: "Beep! Boop!"

- alias: Set Harmony activity
  hide_entity: True
  trigger:
    platform: state
    entity_id: input_select.harmony
  action:
    service: remote.turn_on
    entity_id: remote.gabes_harmony_hub
    data_template:
      activity: >
        {% if is_state("input_select.harmony", "Speaker") %}
          29883813
        {% elif is_state("input_select.harmony", "Fishtank Evening") %}
          25723108
        {% elif is_state("input_select.harmony", "Watch Roku") %}
          26106880
        {% elif is_state("input_select.harmony", "Watch a Movie") %}
          26106724
        {% elif is_state("input_select.harmony", "Fishtank Morning") %}
          25723061
        {% else %}
          -1
        {% endif %}
        
# This next automation is to update the input_select when the Harmony's
# activity was changed from somewhere else, e.g. using its physical remote.
- alias: Update Harmony input_select
  hide_entity: True
  trigger:
    platform: state
    entity_id: remote.gabes_harmony_hub
  action:
    service: input_select.select_option
    data_template:
      entity_id: input_select.harmony
      option: "{{ states.remote.harmony_hub.attributes.current_activity }}"

## Reef Tides Wavemaker
#- alias: Turn on Wavemaker at high tide
#  trigger:
#    platform: template
#    value_template: '{{ strptime(states.sensor.time_utc.state , "%H:%M") == strptime(states.sensor.reef_time_high_tide.state , "%H:%M") }}'
#  action:
#    service: switch.turn_on
#    entity_id: switch.06200940dc4f22cbb94b_2

#- alias: Turn off Wavemaker at low tide
#  trigger:
#    platform: template
#    value_template: '{{ strptime(states.sensor.time_utc.state , "%H:%M") == strptime(states.sensor.reef_time_low_tide.state , "%H:%M") }}'
#  action:
#    service: script.turn_on
#    entity_id: script.reef_waves_lowtide_fade_script

## Amazon Tides Wavemaker
- alias: Turn on Amazon Waves at high tide
  trigger:
    platform: template
    value_template: '{{ strptime(states.sensor.time.state , "%k:%M") == strptime(states.sensor.amazonnexthightide.state , "%k:%M") }}'
  action:
    service: script.turn_on
    entity_id: script.freshwater_waves_on_script

- alias: Turn on Amazon Waves again at low tide
  trigger:
    platform: template
    value_template: '{{ strptime(states.sensor.time.state , "%k:%M") == strptime(states.sensor.amazonnextlowtide.state , "%k:%M") }}'
  action:
    service: script.turn_on
    entity_id: script.freshwater_waves_on_script

#Sunrise Sunset on Reef Tank Diurnal Phasing
- alias: Set sunrise and set with reef-pi
  trigger:
    platform: time
    at: '04:15:00'
  action:
  - service: rest_command.set_diurnal_reef_lights

- alias: Turn Off Reef Lights Outlet at Sunset
  trigger:
    platform: template
    value_template: "{{ strptime(states.sensor.time.state , '%k:%M') == strptime(states.sensor.reeftime_sunset_adjustment.state , '%k:%M') }}"
  action:
  - service: script.turn_on
    entity_id: script.reeftank_evening_outlet_kessil

- alias: Turn On Reef Lights Outlet at Sunrise
  trigger:
    platform: template
    value_template: "{{ strptime(states.sensor.time.state , '%H:%M') == strptime(states.sensor.reeftime_sunrise_adjustment.state , '%H:%M') }}"
  action:
  - service: script.turn_on
    entity_id: script.reeftank_morning_outlet_kessil

#Moonrise Moonset on Tanks
- alias: Stop Reef Moon
  trigger:
    platform: template
    value_template: "{{ strptime(states.sensor.time.state , '%H:%M') == strptime(states.sensor.reeftime_sunrise_adjustment.state , '%H:%M') }}"
  condition:
    condition: numeric_state
    entity_id: sensor.reef_weather_moon_phase_1d
    above: .35
    below: .65 
  action:
  - service: script.turn_on
    entity_id: script.reeftank_moon_off

- alias: Start Reef Moon
  trigger:
    platform: template
    value_template: "{{ strptime(states.sensor.time.state , '%k:%M') == strptime(states.sensor.reeftime_sunset_adjustment.state , '%k:%M') }}"
  condition:
    condition: or
    conditions:
      - condition: numeric_state
        entity_id: sensor.reef_weather_moon_phase_1d
        above: .38
        below: .48 
      - condition: numeric_state
        entity_id: sensor.reef_weather_moon_phase_1d
        above: .53
        below: .63 
  action:
  - service: script.turn_on
    entity_id: script.reeftank_moon_on
  - service: script.turn_on
    entity_id: script.reeftank_moon_up

- alias: Stronger Fade Up of Reef Moon
  trigger:
    platform: template
    value_template: "{{ strptime(states.sensor.time.state , '%k:%M') == strptime(states.sensor.reeftime_sunset_adjustment.state , '%k:%M') }}"
  condition:
    condition: or
    conditions:
      - condition: numeric_state
        entity_id: sensor.reef_weather_moon_phase_1d
        above: .48
        below: .49 
      - condition: numeric_state
        entity_id: sensor.reef_weather_moon_phase_1d
        above: .51
        below: .53 
  action:
  - service: script.turn_on
    entity_id: script.reeftank_moon_on
  - service: script.turn_on
    entity_id: script.reeftank_moon_up_stronger

- alias: Reef Full Moon
  trigger:
    platform: template
    value_template: "{{ strptime(states.sensor.time.state , '%k:%M') == strptime(states.sensor.reeftime_sunset_adjustment.state , '%k:%M') }}"
  condition:
    condition: numeric_state
    entity_id: sensor.reef_weather_moon_phase_1d
    above: .49
    below: .51 
  action:
  - service: script.turn_on
    entity_id: script.reeftank_moon_on
  - service: script.turn_on
    entity_id: script.reeftank_full_moon

- alias: Freshwater Lights and O2 On at Sunrise
  trigger:
    platform: template
    value_template: "{{ strptime(states.sensor.time.state , '%H:%M') == strptime(states.sensor.amazonsunrisetides.state , '%H:%M') }}"
  action:
  - service: script.turn_on
    entity_id: script.octotank_morning_on

- alias: Freshwater Lights and O2 Off at Sunset
  trigger:
    platform: template
    value_template: "{{ strptime(states.sensor.time.state , '%H:%M') == strptime(states.sensor.amazonsunsettides.state , '%H:%M') }}"
  action:
  - service: script.turn_on
    entity_id: script.octotank_evening_off

# Amazon Feeder
- alias: Activate Feeder Script Morning
  trigger:
    platform: time
    at: '09:15:00'
  action:
  - service: script.turn_on
    entity_id: script.freshwater_feeder_script

#- alias: Activate Feeder Script MidDay
#  trigger:
#    platform: time
#    at: '12:15:00'
#  action:
#  - service: script.turn_on
#    entity_id: script.freshwater_feeder_script

- alias: Activate Feeder Script Afternoon
  trigger:
    platform: time
    at: '17:30:00'
  action:
  - service: script.turn_on
    entity_id: script.freshwater_feeder_script

## Amazon Temp Regulation
# This automation script runs when a value is received via Amazon sensor: monthly_amazon_temp
- alias: Set Amazon Thermostat Max Daytime Selector
  trigger:
    platform: template
    value_template: "{{ states.sensor.monthly_amazon_temp_lowmed.state != states.climate.octo_tank_therm.attributes.temperature.state }}"
  condition:
    condition: state
    entity_id: switch.06200940dc4f22cbb432_4
    state: 'on'
  action:
     service: climate.set_temperature
     data_template:
       entity_id: climate.octo_tank_therm
       temperature: '{{ states.sensor.monthly_amazon_temp_lowmed.state | float }}'

 # This automation script runs when a value is received via Amazon sensor: monthly_amazon_temp
- alias: Set Amazon Thermostat Max Night Selector
  trigger:
    platform: template
    value_template: "{{ states.sensor.monthly_amazon_temp_min.state != states.climate.octo_tank_therm.attributes.temperature.state }}"
  condition:
    condition: state
    entity_id: switch.06200940dc4f22cbb432_4
    state: 'off'
  action:
     service: climate.set_temperature
     data_template:
       entity_id: climate.octo_tank_therm
       temperature: '{{ states.sensor.monthly_amazon_temp_min.state | float }}'

 # This automation script runs when a value is received via Reef sensor: reef_low_avg_daily_temp
- alias: Set Reef Thermostat Max Daytime Selector
  trigger:
    platform: template
    value_template: "{{ states.sensor.reef_high_avg_daily_temp.state != states.climate.reef_tank_therm.attributes.temperature.state }}"
  condition:
    condition: state
    entity_id: input_boolean.reef_temp_daytime_state
    state: 'on'
  action:
     service: climate.set_temperature
     data_template:
       entity_id: climate.reef_tank_therm
       temperature: '{{ states.sensor.reef_high_avg_daily_temp.state | float }}'

 # This automation script runs when a value is received via Reef sensor: noaa_daily_min_reef_temp
- alias: Set Reef Thermostat Max Nighttime Selector
  trigger:
    platform: template
    value_template: "{{ states.sensor.noaa_daily_min_reef_temp.state != states.climate.reef_tank_therm.attributes.temperature.state }}"
  condition:
    condition: state
    entity_id: input_boolean.reef_temp_nightime_state
    state: 'on'
  action:
     service: climate.set_temperature
     data_template:
       entity_id: climate.reef_tank_therm
       temperature: '{{ states.sensor.noaa_daily_min_reef_temp.state | float }}'

- alias: Regulate Reef Heater To Off on Low Misread
  trigger:
    platform: template
    value_template: '{{ 32 == states.sensor.onlyreefcontrolpitemp.state }}'
  action:
    service: switch.turn_off
    entity_id: switch.06200940dc4f22cbb94b_3

- alias: Nightly Top OffOn
  trigger:
    - platform: time
      at: '23:24:00'
  action:
    service: switch.turn_on
    entity_id: switch.ato_scheduled

- alias: Nightly Top OffOff
  trigger:
    - platform: time
      at: '23:26:00'
  action:
    service: switch.turn_off
    entity_id: switch.ato_scheduled

- alias: Nightly Doser On
  trigger:
    - platform: time
      at: '23:12:00'
  action:
    service: switch.turn_on
    entity_id: switch.doser_scheduled

- alias: Nightly Doser Off
  trigger:
    - platform: time
      at: '23:16:00'
  action:
    service: switch.turn_off
    entity_id: switch.doser_scheduled

#Turn on sump pump every 20 min
#- alias: Reef Sump Pump On Every Hour
#  trigger:
#    - platform: time_pattern
#      minutes: '/20'
#  condition:
#    condition: state
#    entity_id: sensor.reefcontrolpifloat
#    state: 'OK'
#  action:
#    service: switch.turn_on
#    entity_id: switch.2437254184f3eb695276

#Update Reef temps once a day
- alias: 'download_noaa_temps'
  trigger:
    - platform: time
      at: '01:16:00'
  action:
    - service: downloader.download_file
      data_template:
        url: "https://coralreefwatch.noaa.gov/vs/data/great_nicobar.txt"
        filename: "east_java_bali.txt"
        overwrite: true

#Turn on sump pump every 3 min
- alias: Reef Sump Pulse
  trigger:
    - platform: time_pattern
      minutes: '/4'
  condition:
    condition: state
    entity_id: sensor.reefcontrolpifloat
    state: 'OK'
  action:
    service: script.turn_on
    entity_id: script.reeftank_sump_pulse

#Turn sump pump off on low
- alias: Reef Sump Pump Low Off
  trigger:
    platform: state
    entity_id: sensor.reefcontrolpifloat
    from: 'OK'
    to: 'Low'
  action:
    service: switch.turn_off
    entity_id: switch.2437254184f3eb695276

#Turn sump pump off on low timer
- alias: Reef Sump Pump Low Timer
  trigger:
    platform: state
    entity_id: sensor.reefcontrolpifloat
    to: 'Low'
    for:
      minutes: 5
  action:
    service: switch.turn_off
    entity_id: switch.2437254184f3eb695276

## Herb Garden
- alias: Garden Turn On Lights
  trigger:
    - platform: time
      at: '06:00:00'
  action:
    service: switch.turn_on
    entity_id: switch.garden_light_manual

- alias: Garden Turn Lights Bugfix
  trigger:
    platform: numeric_state
    entity_id: sensor.garden_monitor_light_level
    below: 25
  condition:
    - condition: time
      after: '06:02:00'
      before: '20:58:00'
  action:
    service: switch.turn_on
    entity_id: switch.garden_light_manual

- alias: Garden Turn Off Lights
  trigger:
    - platform: time
      at: '21:00:00'
  action:
    service: switch.turn_off
    entity_id: switch.garden_light_manual

- alias: Garden Turn On Waterbot Morning
  trigger:
    - platform: time
      at: '7:03:00'
  action:
    service: switch.turn_on
    entity_id: switch.garden_waterbot

- alias: Garden Turn Off Waterbot Morning
  trigger:
    - platform: time
      at: '15:03:00'
  action:
    service: switch.turn_off
    entity_id: switch.garden_waterbot

#Alert if plants need water
- alias: ferns_needs_water
  trigger:
    platform: numeric_state
    entity_id: sensor.plant_monitor_soil_moisture
    below: 16
  condition:
    condition: and
    conditions:
      - condition: time
        before: '22:30:00'
        after: '09:30:00'
      - condition: template
        value_template: '{{ as_timestamp(now()) - as_timestamp(states.automation.ferns_needs_water.attributes.last_triggered) | int > 43200 }}'
  action:
    - service: notify.html5_push
      data:
        data:
          renotify: 1
          icon: LOCALHOST_URL/local/icons/plant.png
          badge: LOCALHOST_URL/local/icons/badge_plant.png
          timestamp: '%m'
          url: LOCALHOST_URL/lovelace/6
          vibrate: 700, 700, 700
        message: "Your bedroom ferns need water. Soil moisture is currently at {{ states.sensor.plant_monitor_soil_moisture.state }}%"
        title: "I'm thirsty!"
        target:
          - "Gabes Mate"
          - "Macbook"
#    - service: ifttt.trigger
#      data_template: {"event":"plant_needs_water", "value1":"Bedroom Ferns", "value2":"{{ states.sensor.plant_monitor_soil_moisture.state }}"}
    - service: persistent_notification.create
      data:
        message: "Your bedroom ferns need water. Soil moisture is currently at {{ states.sensor.plant_monitor_soil_moisture.state }}%"
        title: "Bedroom Ferns Water Alert!"
- alias: plant_needs_water
  trigger:
    platform: numeric_state
    entity_id: sensor.garden_monitor_soil_moisture
    below: 10
  condition:
    condition: and
    conditions:
      - condition: time
        before: '22:30:00'
        after: '09:30:00'
      - condition: template
        value_template: '{{ as_timestamp(now()) - as_timestamp(states.automation.plant_needs_water.attributes.last_triggered) | int > 43200 }}'
  action:
    - service: notify.html5_push
      data:
        data:
          renotify: 1
          icon: LOCALHOST_URL/local/icons/plant.png
          badge: LOCALHOST_URL/local/icons/badge_plant.png
          timestamp: '%m'
          url: LOCALHOST_URL/lovelace/6
          vibrate: 700, 700, 700
        message: "Your herb garden needs water. Soil moisture is currently at {{ states.sensor.garden_monitor_soil_moisture.state }}%"
        title: "I'm thirsty!"
        target:
          - "Gabes Mate"
          - "Macbook"
#    - service: ifttt.trigger
#      data_template: {"event":"plant_needs_water", "value1":"Hydroponic Garden", "value2":"{{ states.sensor.garden_monitor_soil_moisture.state }}"}
    - service: persistent_notification.create
      data:
        message: "Your herb garden needs water. Soil moisture is currently at {{ states.sensor.garden_monitor_soil_moisture.state }}%"
        title: "Hydroponic Garden Water Alert!"
- alias: empty_garden_drain
  trigger:
    platform: numeric_state
    entity_id: sensor.garden_monitor_water_level
    above: 60
  condition:
    condition: and
    conditions:
      - condition: time
        before: '22:30:00'
        after: '09:30:00'
      - condition: template
        value_template: '{{ as_timestamp(now()) - as_timestamp(states.automation.empty_garden_drain.attributes.last_triggered) | int > 43200 }}'
  action:
    - service: notify.html5_push
      data:
        data:
          renotify: 1
          icon: LOCALHOST_URL/local/icons/plant.png
          badge: LOCALHOST_URL/local/icons/badge_pipe.png
          timestamp: '%m'
          url: LOCALHOST_URL/lovelace/6
          vibrate: 700, 700, 700
        message: "Empty the drainage reservoir soon. It is currently at {{ states.sensor.garden_monitor_water_level.state }}%"
        title: "Empty me!"
        target:
          - "Gabes Mate"
          - "Macbook"
#    - service: ifttt.trigger
#      data_template: {"event":"empty_garden_drain", "value1":"Hydroponic Garden", "value2":"{{ states.sensor.garden_monitor_water_level.state }}"}
    - service: persistent_notification.create
      data:
        message: "Empty the drainage reservoir soon. It is currently at {{ states.sensor.garden_monitor_water_level.state }}%"
        title: "Hydroponic Garden Reservoir Alert!"

## Alert if Garden Bot is down
- alias: garden_bot_alert
  trigger:
    platform: state
    entity_id: device_tracker.octocam
  condition:
    - condition: template
      value_template: "{{ trigger.to_state.state != trigger.from_state.state }}"
  action:
    - service: ifttt.trigger
      data_template: {"event":"change_of_ip", "value1":"GardenBot changed state to {{ states.device_tracker.octocam.state }}"}

## Vacuuming
- alias: Vacuum on Schedule
  trigger:
    platform: time
    at: '14:00:00'
  condition:
  - condition: time
    weekday:
      - tue
      - thu
  - condition: state
    entity_id: device_tracker.huawei_mate_9_92528f2b1a5
    state: work
  action:
    service: script.turn_on
    entity_id: script.roomba_turn_on


#Alert if public IP Changes
- alias: ip_change_alert
  trigger:
    platform: state
    entity_id: sensor.ip_address
  condition:
    - condition: template
      value_template: "{{ trigger.to_state.state != trigger.from_state.state }}"
  action:
    - service: ifttt.trigger
      data_template: {"event":"change_of_ip", "value1":"{{ states.sensor.ip_address.state }}"}

#Text Message if theres mail
- alias: usps_mail_alert
  trigger:
    platform: zone
    entity_id: device_tracker.huawei_mate_992528f2b1a5
    zone: zone.home
    event: enter
  condition:
    condition: or
    conditions:
      - condition: numeric_state
        entity_id: sensor.usps_mail
        above: '0' 
      - condition: numeric_state
        entity_id: sensor.usps_packages
        above: '0'
  action:
    - service: script.turn_on
      entity_id: script.usps_sms_notification

#Text Message if there's mail refresher on
- alias: usps_mail_alert_automation_on
  trigger:
    - platform: numeric_state
      entity_id: sensor.usps_mail
      above: '0'
    - platform: numeric_state
      entity_id: sensor.usps_packages
      above: '0'
  action:
    - service: automation.turn_on
      entity_id: automation.usps_mail_alert

#Text Message if there's mail refresher off
- alias: usps_mail_alert_automation_off
  trigger:
    - platform: numeric_state
      entity_id: sensor.usps_mail
      below: '1' 
  action:
    - service: automation.turn_off
      entity_id: automation.usps_mail_alert

#3D Printer Shutdown on Idle
- alias: Turn off 3D Printer on Idle
  trigger:
    platform: state
    entity_id: sensor.octoprint_target_tool1_temp
    to: '32'
#  condition:
#    condition: state
#    entity_id: binary_sensor.octoprint_status_printing
#    state: 'off'
  # Trigger only if state was this for last 30 minutes.
#    for:
#      minutes: 30
  action:
#    - delay:
#        minutes: 15
    - service: switch.turn_off
      entity_id: switch.2437254184f3eb695327

- id: 'rpi_power_issue'
  alias: Power Problem Notification
  trigger:
  - platform: numeric_state
    entity_id: sensor.rpi_power_status
    above: 0
    for:
      minutes: 1
  condition:
  action:
    service: persistent_notification.create
    data:
      message: "Charger reported {{ states.sensor.rpi_power_status.state }}"
      title: "RPI Power Issue"

#- alias: Check for Tweets OctoCam
#  id: twitter_check_octocam
#  trigger:
#    - platform: time_pattern
#      minutes: '/30'
#  action:
#    - service: shell_command.tweet_retrieve_octocam

#- alias: Check for Tweets SFGabe
#  id: twitter_check_sfgabe
#  trigger:
#    - platform: time_pattern
#      minutes: '/60'
#  action:
#    - service: shell_command.tweet_retrieve_sfgabe

## Alarm 2 test
- id: wake_up_alarm_2
  alias: Alarm clock
  initial_state: off
  trigger:
    platform: template
    value_template: "{{ states('sensor.time') == (((state_attr('input_datetime.bedroom_alarm_clock_time' , 'timestamp')) - (15 * 60))|timestamp_custom('%H:%M', false)) }}"
  condition:
    - condition: state
      entity_id: device_tracker.huawei_mate_9_92528f2b1a5
      state: 'home'
    - condition: state
      entity_id: input_boolean.bedroom_alarm_clock_status
      state: 'on'
  action:
    - service: script.turn_on
      data:
        entity_id: script.bedroom_wake_up

## IFTTT Test
- id: IFTTT_test
  alias: IFTTT Test
  trigger:
    platform: event
    event_type: ifttt_webhook_received
    event_data:
      action: call_service
  action:
    service_template: '{{ trigger.event.data.service }}'
    data_template:
      entity_id: '{{ trigger.event.data.entity_id }}'

- alias: Download Reef Stats File
  id: auto_download_reef_stats
  trigger:
    platform: time
    at: '20:15:00'
  action:
    - service: shell_command.download_reef_stats

- alias: Download Amazon Stats File
  id: auto_download_amazon_stats
  trigger:
    platform: time
    at: '20:16:00'
  action:
    - service: shell_command.download_amazon_stats

#Presence Detection Logic
- alias: Mark Gabe as just arrived
  trigger:
    - platform: state
      entity_id: group.gabe
      to: 'home'
  action:
    - service: input_select.select_option
      data:
        entity_id: input_select.gabe_status_dropdown
        option: Just Arrived
 
- alias: Mark Gabe as home
  trigger:
    - platform: state
      entity_id: input_select.gabe_status_dropdown
      to: 'Just Arrived'
      for:
        minutes: 10
    - platform: state
      entity_id: input_select.gabe_status_dropdown
      from: 'Just Left'
      to: 'Just Arrived'
  condition:
    - condition: state
      entity_id: input_boolean.bed_occupancy
      state: 'off'
  action:
    - service: input_select.select_option
      data:
        entity_id: input_select.gabe_status_dropdown
        option: Home
 
- alias: Mark Gabe as just left
  trigger:
    - platform: state
      entity_id: group.gabe
      to: 'not_home'
  action:
    - service: input_select.select_option
      data:
        entity_id: input_select.gabe_status_dropdown
        option: Just Left
 
- alias: Mark Gabe as away
  trigger:
    - platform: state
      entity_id: input_select.gabe_status_dropdown
      to: 'Just Left'
      for:
        minutes: 10
  action:
    - service: input_select.select_option
      data:
        entity_id: input_select.gabe_status_dropdown
        option: Away
    - service: rest_command.tasker_away_from_home

- alias: Mark Gabe as in Bed
  trigger:
    - platform: state
      entity_id: input_boolean.bed_occupancy
      to: 'on'
      for:
        minutes: 10
  condition:
    - condition: state
      entity_id: input_select.gabe_status_dropdown
      state: 'Home'
  action:
    - service: input_select.select_option
      data:
        entity_id: input_select.gabe_status_dropdown
        option: 'In Bed'


- alias: Lobby mail check
  trigger:
    - platform: state
      entity_id: input_select.gabe_status_dropdown
      to: 'In the Lobby'
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: sensor.usps_packages
        above: 0
      - condition: time
        after: '15:00:00'
  action:
    - service: notify.html5_push
      data:
        data:
          actions:
          - action: dismiss
            title: "Got it!"
            icon: LOCALHOST_URL/local/icons/badge_mailbox.png
          image: "LOCALHOST_URL/local/mail_images/todays_mail.gif"
          renotify: 1
          icon: LOCALHOST_URL/local/icons/mailbox_on.png
          badge: LOCALHOST_URL/local/icons/badge_mailbox.png
          timestamp: '%m'
          url: LOCALHOST_URL/states/group.homecams
          vibrate: 700, 700, 700
        message: "You have {{ states.sensor.usps_mail.state }} new snail mails!"
        title: "New Snail Mail!"

- alias: Lobby package check
  trigger:
    - platform: state
      entity_id: input_select.gabe_status_dropdown
      to: 'In the Lobby'
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: sensor.usps_packages
        above: 0
      - condition: time
        after: '15:00:00'
  action:
    - service: notify.html5_push
      data:
        data:
          actions:
          - action: dismiss
            title: "Got it!"
            icon: LOCALHOST_URL/local/icons/badge_package.png
          renotify: 1
          icon: LOCALHOST_URL/local/icons/package.png
          badge: LOCALHOST_URL/local/icons/badge_package.png
          timestamp: '%m'
          url: LOCALHOST_URL/states/group.homecams
          vibrate: 700, 700, 700
        message: "You have {{ states.sensor.usps_packages.state }} new packages!"
        title: "New Packages!"

- alias: Mark Gabe as extended away
  trigger:
    - platform: state
      entity_id: input_select.gabe_status_dropdown
      to: 'Away'
      for:
        hours: 24
  action:
    - service: input_select.select_option
      data_template:
        entity_id: input_select.gabe_status_dropdown
        option: Extended Away

- alias: Request Mailbox Temp
  trigger:
    - platform: time_pattern
      minutes: '/5'
  action:
    service: script.turn_on
    entity_id: script.get_mailbox_temp

- alias: Mailbox Mail Flag On
  trigger:
    platform: numeric_state
    entity_id: sensor.usps_mail
    above: 0
  action:
    - service: homeassistant.turn_on
      data:
        entity_id: switch.mailbox_flag
    - service: homeassistant.turn_on
      data:
        entity_id: switch.mailbox_green_light

- alias: Mailbox Package Light On
  trigger:
    platform: numeric_state
    entity_id: sensor.usps_packages
    above: 0
  action:
    - service: homeassistant.turn_on
      data:
        entity_id: switch.mailbox_flag
    - service: homeassistant.turn_on
      data:
        entity_id: switch.mailbox_red_light

- alias: Mailbox Mail Flag Off
  trigger:
    platform: numeric_state
    entity_id: sensor.usps_mail
    below: 1
  action:
    - service: homeassistant.turn_off
      data:
        entity_id: switch.mailbox_flag
    - service: homeassistant.turn_off
      data:
        entity_id: switch.mailbox_green_light

- alias: Mailbox Package Light Off
  trigger:
    platform: numeric_state
    entity_id: sensor.usps_packages
    below: 1
  action:
    - service: homeassistant.turn_off
      data:
        entity_id: switch.mailbox_flag
    - service: homeassistant.turn_off
      data:
        entity_id: switch.mailbox_red_light

#Hue Dimmer Switch
- id: Hue Dimmer Switch 1 Click
  alias: Hue Dimmer Switch 1 Click
  trigger:
    - platform: state
      entity_id: sensor.hue_dimmer_switch_1
      to: "1_click"
    - platform: state
      entity_id: sensor.hue_dimmer_switch_1
      to: "1_click_up"
  action:
    - service: light.turn_on
      entity_id: light.bedside_table
      data:
        brightness: 200
        rgb_color: [255,236,182]
    - service: light.turn_on
      entity_id: light.bedroom_desk
      data:
        brightness: 200
        rgb_color: [255,236,182]
    - service: light.turn_on
      entity_id: light.desk
      data:
        brightness: 200
        rgb_color: [255,236,182]
    - service: light.turn_on
      entity_id: light.kitchen
      data:
        brightness: 200
        rgb_color: [255,236,182]
    - service: light.turn_on
      entity_id: light.kitchen_2
      data:
        brightness: 200
        rgb_color: [255,236,182]
    - service: light.turn_on
      entity_id: light.entry_light
    - service: light.turn_on
      entity_id: light.table
      data:
        brightness: 200
        rgb_color: 255,236,182

- id: Hue Dimmer Switch 2 Click
  alias: Hue Dimmer Switch 2 Click
  trigger:
    - platform: state
      entity_id: sensor.hue_dimmer_switch_1
      to: "2_click"
    - platform: state
      entity_id: sensor.hue_dimmer_switch_1
      to: "2_click_up"
  action:
    - service: light.turn_on
      entity_id: light.bedside_table
      data:
        brightness: 255
        rgb_color: [217,234,255]
    - service: light.turn_on
      entity_id: light.bedroom_desk
      data:
        brightness: 255
        rgb_color: [217,234,255]
    - service: light.turn_on
      entity_id: light.desk
      data:
        brightness: 255
        rgb_color: [217,234,255]
    - service: light.turn_on
      entity_id: light.kitchen
      data:
        brightness: 255
        rgb_color: [217,234,255]
    - service: light.turn_on
      entity_id: light.kitchen_2
      data:
        brightness: 255
        rgb_color: [217,234,255]
    - service: light.turn_on
      entity_id: light.entry_light
    - service: light.turn_on
      entity_id: light.table
      data:
        brightness: 255
        rgb_color: [217,234,255]

- id: Hue Dimmer Switch 3 Click
  alias: Hue Dimmer Switch 3 Click
  trigger:
    - platform: state
      entity_id: sensor.hue_dimmer_switch_1
      to: "3_click"
    - platform: state
      entity_id: sensor.hue_dimmer_switch_1
      to: "3_click_up"
  action:
    - service: light.turn_on
      entity_id: light.bedside_table
      data:
        brightness: 100
        rgb_color: [255,226,145]
    - service: light.turn_on
      entity_id: light.bedroom_desk
      data:
        brightness: 100
        rgb_color: [255,226,145]
    - service: light.turn_on
      entity_id: light.desk
      data:
        brightness: 100
        rgb_color: [255,226,145]
    - service: light.turn_on
      entity_id: light.kitchen
      data:
        brightness: 100
        rgb_color: [255,226,145]
    - service: light.turn_on
      entity_id: light.kitchen_2
      data:
        brightness: 100
        rgb_color: [255,226,145]
    - service: light.turn_on
      entity_id: light.table
      data:
        brightness: 100
        rgb_color: [255,226,145]
    - service: light.turn_off
      entity_id: light.entry_light

- id: Hue Dimmer Switch 4 Click
  alias: Hue Dimmer Switch 4 Click
  trigger:
    - platform: state
      entity_id: sensor.hue_dimmer_switch_1
      to: "4_click"
    - platform: state
      entity_id: sensor.hue_dimmer_switch_1
      to: "4_click_up"
  action:
    - service: light.turn_off
      entity_id: 
        - light.bedside_table
        - light.bedroom_desk
        - light.desk
        - light.kitchen
        - light.kitchen_2
        - light.entry_light
        - light.table

#  Capture a frame every 10 minutes while the room is occupied
- alias : Room Auto Record
  trigger:
    platform: time_pattern
    minutes: '/10'
    seconds: 0
  condition:
    - condition: state
      entity_id: binary_sensor.people_home
      state: 'off'
    - condition: state
      entity_id: 'binary_sensor.room_occupied'
      state: 'on'
  action:
    - service: rest_command.trigger_snapshot_room

- alias: Motion Detection Alert On 
  trigger:
    - platform: state
      entity_id: binary_sensor.room_occupied
      from: 'off'
      to: 'on'
    - platform: state
      entity_id: binary_sensor.dashboard_motion
      from: 'off'
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'off'
      - condition: state
        entity_id: vacuum.roomba
        state: 'off'
  action:
    - service: switch.turn_on
      entity_id: switch.motion_text_change
    - service: rest_command.trigger_snapshot_room
    - delay: '00:00:04'
    - service: shell_command.motion_detect_get_latest
    - delay: '00:00:02'
    - service: notify.html5_push
      data:
        data:
          actions:
          - action: call_the_hounds
            title: "Call the Hounds!"
            icon: LOCALHOST_URL/local/icons/badge_dog.png
          - action: dismiss
            title: Dismiss
            icon: LOCALHOST_URL/local/icons/badge_dismiss.png
          image: "LOCALHOST_URL/local/motion/recent-motion-overall.jpg"
          renotify: 1
          icon: LOCALHOST_URL/local/icons/cctv.png
          badge: LOCALHOST_URL/local/icons/badge_camera.png
          timestamp: '%m'
          url: LOCALHOST_URL/states/group.homecams
          vibrate: 700, 700, 700
        message: Motion in living room at {{ as_timestamp(now()) | timestamp_custom('%H:%M', true) }}
        title: "Intruder Alert!"
        target:
          - "Gabes Mate"
          - "Macbook"
    - service: persistent_notification.create
      data:
        message: I detected motion in your living room at {{ as_timestamp(now()) | timestamp_custom('%H:%M', true) }} 
        title: "Intruder Alert!"

#Hounds Alarm
- alias: hound_alarm
  trigger:
  - event_data:
      action: call_the_hounds
    event_type: html5_notification.clicked
    platform: event
  action:
  - entity_id: switch.call_the_hounds
    service: switch.turn_on
  - service: light.turn_on
    entity_id: light.thundercloud
    data:
      brightness: 255
      rgb_color: 255,0,0
      effect: solid
      flash: long
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'

# Alert if Offline
- alias: Alert when device goes offline
  trigger:
    - platform: state
      entity_id: sensor.online_device_amazon_echo, sensor.online_device_mailbox, sensor.online_device_harmony_hub, sensor.online_device_homecam_pi, sensor.online_device_octoprint, sensor.online_device_phillips_hue,  sensor.online_device_entry_pi, sensor.online_device_reefcam_pantilt, sensor.online_device_reef_pi, sensor.online_device_entry_kiosk, sensor.online_device_gardenbot, sensor.online_device_plant_monitor
      from: 'Online'
      to: 'Offline'
      for:
        minutes: 60
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {% if states.automation.alert_when_device_goes_offline.last_triggered is not none %}
            {% if as_timestamp(now()) | int   -  as_timestamp(states.automation.alert_when_device_goes_offline.attributes.last_triggered) | int > 3600 %} true {% else %} false
            {% endif %}
          {% else %}
          false
          {% endif %}
  action:
    - service: ifttt.trigger
      data_template: {"event":"change_of_ip", "value1":"{{trigger.to_state.attributes.friendly_name}} has been offline for 1 hour. Please check the status of this device."}

# Harmony Soundbar
- id: samsung_soundbar_power
  alias: 'Soundbar'
  trigger: 
    platform: state
    entity_id: input_boolean.samsung_soundbar_power   #### Triggered by either turning on or off the input_boolen
  action:
    service: remote.send_command
    data_template:
      entity_id: remote.gabes_harmony_hub
      device: Samsung Amp
      command: >
        {% if is_state(trigger.entity_id, 'on') %}
          PowerOn
        {% else %}
          PowerOff
        {% endif %}

- alias: Samsung Soundbar Volume (Media to Slider)
  trigger:
    - platform: state
      entity_id: media_player.yamaha_receiver
  action:
     service: input_number.set_value
     data_template:
       entity_id: input_number.samsung_soundbar
       value: >
          {{ ( ( -1.0 + trigger.to_state.attributes.volume_level | float ) * 100.0 ) | round(0.0) }}

- alias: Samsung Soundbar Volume (Slider to Media)
  trigger:
    - platform: state
      entity_id: input_number.samsung_soundbar
  action:
    - service: media_player.volume_set
      data_template:
        entity_id: media_player.yamaha_receiver
        volume_level: >
          {{ (1.0 - trigger.to_state.state | float / 100.0) | round(2) }}

#Humidifier Switch through Alexa routine
- alias: Turn on Humidifier
  trigger:
    - platform: state
      entity_id: input_boolean.humidifier_toggle
      to: 'on'
  action:
    - service: script.turn_on
      entity_id: script.alexa_humidifier_on
- alias: Turn off Humidifier
  trigger:
    - platform: state
      entity_id: input_boolean.humidifier_toggle
      to: 'off'
  action:
    - service: script.turn_on
      entity_id: script.alexa_humidifier_off

#AC Switch through Alexa routine
- alias: Turn on Bedroom AC
  trigger:
    - platform: state
      entity_id: input_boolean.bedroom_ac_toggle
      to: 'on'
  action:
    - service: script.turn_on
      entity_id: script.alexa_bedroom_ac_on
- alias: Turn off Bedroom AC
  trigger:
    - platform: state
      entity_id: input_boolean.bedroom_ac_toggle
      to: 'off'
  action:
    - service: script.turn_on
      entity_id: script.alexa_bedroom_ac_off
- alias: Turn on Livingroom AC
  trigger:
    - platform: state
      entity_id: input_boolean.livingroom_ac_toggle
      to: 'on'
  action:
    - service: script.turn_on
      entity_id: script.alexa_livingroom_ac_on
- alias: Turn off Livingroom AC
  trigger:
    - platform: state
      entity_id: input_boolean.livingroom_ac_toggle
      to: 'off'
  action:
    - service: script.turn_on
      entity_id: script.alexa_livingroom_ac_off

- alias: Set Livingroom AC
  trigger:
    - platform: state
      entity_id: input_select.alexa_livingroom_ac
  action:
    - service: script.turn_on
      data:
        entity_id: script.alexa_livingroom_ac_set

- alias: Set Bedroom AC
  trigger:
    - platform: state
      entity_id: input_select.alexa_bedroom_ac
  action:
    - service: script.turn_on
      data:
        entity_id: script.alexa_bedroom_ac_set


- alias: Homecam Snapshot Momentary
  trigger:
    - platform: state
      entity_id: input_boolean.homecam_snapshot
      to: 'on'
  action:
    - service: rest_command.trigger_snapshot_room
    - delay: '00:00:02'
    - service: input_boolean.turn_off
      entity_id: input_boolean.homecam_snapshot


#Aircraft Radio
- alias: Aircraft Radio Power On
  trigger:
    - platform: state
      entity_id: input_boolean.aircraft_radio_power_toggle
      to: 'on'
  action:
    - service: shell_command.aircraft_radio_power
    - delay: '00:00:02'
    - service: shell_command.aircraft_radio_mute

- alias: Aircraft Radio Power Off
  trigger:
    - platform: state
      entity_id: input_boolean.aircraft_radio_power_toggle
      to: 'off'
  action:
    - service: shell_command.aircraft_radio_mute
    - delay: '00:00:02'
    - service: shell_command.aircraft_radio_power

- alias: Aircraft Radio Play Pause
  trigger:
    - platform: state
      entity_id: input_boolean.aircraft_radio_play_toggle
      to: 'on'
  action:
    - service: shell_command.aircraft_radio_play
    - delay: '00:00:02'
    - service: input_boolean.turn_off
      entity_id: input_boolean.aircraft_radio_play_toggle

- alias: Aircraft Radio Mode
  trigger:
    - platform: state
      entity_id: input_boolean.aircraft_radio_mode_toggle
      to: 'on'
  action:
    - service: shell_command.aircraft_radio_mute
    - delay: '00:00:02'
    - service: shell_command.aircraft_radio_mode
    - delay: '00:00:02'
    - service: shell_command.aircraft_radio_mute
    - delay: '00:00:02'
    - service: input_boolean.turn_off
      entity_id: input_boolean.aircraft_radio_mode_toggle

- alias: Aircraft Radio Mute
  trigger:
    - platform: state
      entity_id: input_boolean.aircraft_radio_mute_toggle
      to: 'on'
  action:
    - service: shell_command.aircraft_radio_mute
    - delay: '00:00:02'
    - service: input_boolean.turn_off
      entity_id: input_boolean.aircraft_radio_mute_toggle

- alias: Aircraft Radio EQ
  trigger:
    - platform: state
      entity_id: input_boolean.aircraft_radio_eq_toggle
      to: 'on'
  action:
    - service: shell_command.aircraft_radio_eq
    - delay: '00:00:02'
    - service: input_boolean.turn_off
      entity_id: input_boolean.aircraft_radio_eq_toggle

- alias: Aircraft Radio Fast Forward
  trigger:
    - platform: state
      entity_id: input_boolean.aircraft_radio_fwd_toggle
      to: 'on'
  action:
    - service: shell_command.aircraft_radio_fwd
    - delay: '00:00:02'
    - service: input_boolean.turn_off
      entity_id: input_boolean.aircraft_radio_fwd_toggle

- alias: Aircraft Radio Stop
  trigger:
    - platform: state
      entity_id: input_boolean.aircraft_radio_stop_toggle
      to: 'on'
  action:
    - service: shell_command.aircraft_radio_stop
    - delay: '00:00:02'
    - service: input_boolean.turn_off
      entity_id: input_boolean.aircraft_radio_stop_toggle

- alias: Aircraft Radio Back
  trigger:
    - platform: state
      entity_id: input_boolean.aircraft_radio_back_toggle
      to: 'on'
  action:
    - service: shell_command.aircraft_radio_back
    - delay: '00:00:02'
    - service: input_boolean.turn_off
      entity_id: input_boolean.aircraft_radio_back_toggle

- alias: Aircraft Radio Rewind
  trigger:
    - platform: state
      entity_id: input_boolean.aircraft_radio_rwd_toggle
      to: 'on'
  action:
    - service: shell_command.aircraft_radio_rwd
    - delay: '00:00:02'
    - service: input_boolean.turn_off
      entity_id: input_boolean.aircraft_radio_rwd_toggle

- alias: Aircraft Radio Volume Up
  trigger:
    - platform: state
      entity_id: input_boolean.aircraft_radio_volume_up_toggle
      to: 'on'
  action:
    - service: shell_command.aircraft_radio_up
    - delay: '00:00:02'
    - service: input_boolean.turn_off
      entity_id: input_boolean.aircraft_radio_volume_up_toggle

- alias: Aircraft Radio Rewind
  trigger:
    - platform: state
      entity_id: input_boolean.aircraft_radio_volume_down_toggle
      to: 'on'
  action:
    - service: shell_command.aircraft_radio_down
    - delay: '00:00:02'
    - service: input_boolean.turn_off
      entity_id: input_boolean.aircraft_volume_down_toggle

#Amazon ATO
- alias: Amazon ATO
  trigger:
    - platform: state
      entity_id: input_boolean.amazon_ato
      to: 'on'
  action:
    - service: shell_command.amazon_ato_on
    - delay: '00:00:20'
    - service: input_boolean.turn_off
      entity_id: input_boolean.amazon_ato
    - service: shell_command.amazon_ato_off

- alias: Amazon ATO Level Notify
  trigger:
    - platform: state
      entity_id: sensor.amazon_ato_level
      from: 'OK'
      to: 'Low'
  action:
    - service: notify.html5_push
      data:
        data:
          renotify: 1
          icon: LOCALHOST_URL/local/icons/fish_school.png
          badge: LOCALHOST_URL/local/icons/badge_pipe.png
          timestamp: '%m'
          url: LOCALHOST_URL/lovelace/6
          vibrate: 700, 700, 700
        message: "The closet tank needs water soon"
        title: "Feeling Low"
        target:
          - "Gabes Mate"
          - "Macbook"
    - service: persistent_notification.create
      data:
        message: "The closet tank needs water soon"
        title: "Feeling Low"

- alias: Amazon ATO Refill
  trigger:
    - platform: state
      entity_id: sensor.amazonpifloat
      from: 'OK'
      to: 'Low'
  action:
    - service: shell_command.amazon_ato_on
    - delay: '00:00:20'
    - service: input_boolean.turn_off
      entity_id: input_boolean.amazon_ato
    - service: shell_command.amazon_ato_off

#Bed Occupancy
- alias: Bed Set
  hide_entity: True
  trigger:
    platform: state
    entity_id: sensor.bed_occupancy_load
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: sensor.bed_occupancy_load
        above: '201'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.bed_occupancy

# clears the in_bed boolean under a certain mass
- alias: Bed Clear
  hide_entity: True
  trigger:
    platform: state
    entity_id: sensor.bed_occupancy_load
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: sensor.bed_occupancy_load
        below: '200'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.bed_occupancy

- alias: Bed Tare Set
  hide_entity: True
  trigger:
    platform: time
    at: '13:00:00'
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: sensor.bed_occupancy_load
        below: '100'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'off'
  action:
    - service: script.turn_on
      entity_id: script.zero_bed

# tasks to perform when in bed
- alias: Bed Occupied Tasks Single
  trigger:
    platform: state
    entity_id: sensor.bed_occupancy_count
    to: 'Single'
  condition:
    condition: time
    after: '23:00:00'
    before: '06:00:00'
  action:
    - service: light.turn_off
      entity_id: 
        - light.bedside_table
        - light.desk
        - light.kitchen
        - light.bedroom_desk
        - light.kitchen_2
        - light.table
      data:
        transition: 450
    - service: light.turn_off
      entity_id: light.entry_light
    - service: script.turn_on
      entity_id: script.sleep_mode_cool_room

- alias: Bed Occupied Tasks Daytime
  trigger:
    platform: state
    entity_id: input_boolean.bed_occupancy
    to: 'on'
  condition:
    condition: time
    after: '12:00:00'
    before: '20:00:00'
  action:
    - service: light.turn_on
      entity_id: light.bedside_table
      data:
        transition: 120
        brightness: 250
        rgb_color: [252,242,197]

- alias: Bed Not Occupied Tasks Single
  trigger:
    platform: state
    entity_id: sensor.bed_occupancy_count
    to: 'Empty'
  condition:
    condition: and
    conditions:
      - condition: time
        after: '22:00:00'
        before: '04:00:00'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
  action:
    - service: light.turn_on
      entity_id: light.bedside_table
      data:
        transition: 5000
        brightness: 120
        rgb_color: [115,50,168]

- alias: Bed Not Occupied Tasks Morning
  trigger:
    platform: state
    entity_id: sensor.bed_occupancy_count
    to: 'Empty'
  condition:
    condition: and
    conditions:
      - condition: time
        after: '07:00:00'
        before: '11:00:00'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
  action:
    - service: light.turn_off
      entity_id: light.bedside_table
      data:
        transition: 10000
        brightness: 120
        rgb_color: [115,50,168]
    - service: light.turn_off
      entity_id: light.bedroom_desk
      data:
        transition: 10000
        brightness: 120
        rgb_color: [115,50,168]

- alias: Light on before bed
  trigger:
    platform: time
    at: '22:00:00'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
  action:
    - service: light.turn_on
      entity_id: light.bedside_table
      data:
        transition: 5000
        brightness: 200
        rgb_color: [115,50,168]

- alias: Bed Occupied Tasks Double
  trigger:
    platform: state
    entity_id: sensor.bed_occupancy_count
    to: 'Double'
  condition:
    condition: time
    after: '20:00:00'
    before: '06:00:00'
  action:
    - service: light.turn_on
      entity_id: light.bedside_table
      data:
        brightness: 120
        rgb_color: [115,50,168]
        transition: 300
    - service: light.turn_on
      entity_id: light.bedroom_desk
      data:
        brightness: 60
        rgb_color: [89,50,168]
        transition: 600

#Thundercloud
- alias: Lightning Warning
  trigger:
    - platform: geo_location
      source: wwlln
      zone: zone.home
      event: enter
  action:
    - service: persistent_notification.create
      data_template:
        message: "{{ trigger.to_state.name }} - {{ trigger.to_state.attributes.status }}, as of {{ trigger.to_state.attributes.publication_date }}"
        title: "Oooooh! Lightning!"
    - service: script.turn_on
      entity_id: script.lightning_burst

#Full brightness if light is on
- alias: Thundercloud Overcast
  trigger:
    platform: numeric_state
    entity_id: sensor.dark_sky_cloud_coverage
    above: 70
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'on'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 110

- alias: Thundercloud Sunny
  trigger:
    platform: time_pattern
    minutes: "/5"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.dark_sky_icon_0h
        state: 'clear-day'
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'on'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 255
        rgb_color: [255,226,145]
        effect: solid

- alias: Thundercloud Sunny Night
  trigger:
    platform: time_pattern
    minutes: "/5"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.dark_sky_icon_0h
        state: 'clear-night'
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'on'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 150
        rgb_color: [255,181,108]
        effect: solid

- alias: Thundercloud Cloudy
  trigger:
    platform: time_pattern
    minutes: "/5"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.dark_sky_icon_0h
        state: 'cloudy'
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'on'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 255
        rgb_color: [71,71,255]
        effect: solid

- alias: Thundercloud Fog
  trigger:
    platform: time_pattern
    minutes: "/5"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.dark_sky_icon_0h
        state: 'fog'
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'on'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 255
        rgb_color: [90,255,36]
        effect: solid

- alias: Thundercloud Partly Cloudy
  trigger:
    platform: time_pattern
    minutes: "/5"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.dark_sky_icon_0h
        state: 'partly-cloudy-day'
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'on'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 255
        rgb_color: [71,208,255]
        effect: solid

- alias: Thundercloud Partly Cloudy Night
  trigger:
    platform: time_pattern
    minutes: "/5"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.dark_sky_icon_0h
        state: 'partly-cloudy-night'
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'on'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 110
        rgb_color: [71,208,255]
        effect: solid

- alias: Thundercloud Rain
  trigger:
    platform: time_pattern
    minutes: "/5"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.dark_sky_icon_0h
        state: 'rain'
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'on'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 120
        rgb_color: [36,36,255]
        effect: juggle

- alias: Thundercloud Snow
  trigger:
    platform: time_pattern
    minutes: "/5"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.dark_sky_icon_0h
        state: 'snow'
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'on'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 120
        rgb_color: [0,255,255]
        effect: juggle

- alias: Thundercloud Sleet
  trigger:
    platform: time_pattern
    minutes: "/5"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.dark_sky_icon_0h
        state: 'sleet'
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'on'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 150
        rgb_color: [0,255,190]
        effect: glitter

- alias: Thundercloud Wind
  trigger:
    platform: time_pattern
    minutes: "/5"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.dark_sky_icon_0h
        state: 'wind'
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'on'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 200
        rgb_color: [255,226,145]
        effect: juggle

- alias: Thundercloud Thunderstorm
  trigger:
    platform: time_pattern
    minutes: "/5"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.dark_sky_icon_0h
        state: 'thunderstorm'
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'on'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 180
        rgb_color: [255,255,255]
        effect: lightning

#Low brightness if light is off
- alias: Thundercloud Overcast Lowlight
  trigger:
    platform: numeric_state
    entity_id: sensor.dark_sky_cloud_coverage
    above: 70
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'off'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 30

- alias: Thundercloud Sunny Lowlight
  trigger:
    platform: time_pattern
    minutes: "/5"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.dark_sky_icon_0h
        state: 'clear-day'
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'off'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 60
        rgb_color: [255,226,145]
        effect: solid

- alias: Thundercloud Sunny Night Lowlight
  trigger:
    platform: time_pattern
    minutes: "/5"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.dark_sky_icon_0h
        state: 'clear-night'
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'off'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 40
        rgb_color: [255,181,108]
        effect: solid

- alias: Thundercloud Cloudy Lowlight
  trigger:
    platform: time_pattern
    minutes: "/5"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.dark_sky_icon_0h
        state: 'cloudy'
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'off'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 60
        rgb_color: [71,71,255]
        effect: solid

- alias: Thundercloud Fog Lowlight
  trigger:
    platform: time_pattern
    minutes: "/5"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.dark_sky_icon_0h
        state: 'fog'
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'off'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 60
        rgb_color: [90,255,36]
        effect: solid

- alias: Thundercloud Partly Cloudy Lowlight
  trigger:
    platform: time_pattern
    minutes: "/5"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.dark_sky_icon_0h
        state: 'partly-cloudy-day'
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'off'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 60
        rgb_color: [71,208,255]
        effect: solid

- alias: Thundercloud Partly Cloudy Night Lowlight
  trigger:
    platform: time_pattern
    minutes: "/5"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.dark_sky_icon_0h
        state: 'partly-cloudy-night'
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'off'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 30
        rgb_color: [71,208,255]
        effect: solid

- alias: Thundercloud Rain Lowlight
  trigger:
    platform: time_pattern
    minutes: "/5"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.dark_sky_icon_0h
        state: 'rain'
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'off'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 40
        rgb_color: [36,36,255]
        effect: juggle

- alias: Thundercloud Snow Lowlight
  trigger:
    platform: time_pattern
    minutes: "/5"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.dark_sky_icon_0h
        state: 'snow'
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'off'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 40
        rgb_color: [0,255,255]
        effect: juggle

- alias: Thundercloud Sleet Lowlight
  trigger:
    platform: time_pattern
    minutes: "/5"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.dark_sky_icon_0h
        state: 'sleet'
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'off'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 40
        rgb_color: [0,255,190]
        effect: glitter

- alias: Thundercloud Wind Lowlight
  trigger:
    platform: time_pattern
    minutes: "/5"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.dark_sky_icon_0h
        state: 'wind'
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'off'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 50
        rgb_color: [255,226,145]
        effect: juggle

- alias: Thundercloud Thunderstorm Lowlight
  trigger:
    platform: time_pattern
    minutes: "/5"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.dark_sky_icon_0h
        state: 'thunderstorm'
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
      - condition: state
        entity_id: light.entry_light
        state: 'off'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 60
        rgb_color: [255,255,255]
        effect: lightning

- alias: Thundercloud Weather Alert NYC
  trigger:
    platform: state
    entity_id: sensor.dark_sky_alerts
    from: "0"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.bed_occupancy_count
        state: 'Empty'
      - condition: state
        entity_id: binary_sensor.people_home
        state: 'on'
  action:
    - service: light.turn_on
      entity_id: light.thundercloud
      data:
        brightness: 255
        rgb_color: [255,0,0]
        effect: solid
        flash: short

#################################################################
## Roomba Automations
#################################################################

        ##########################################################
        ## Run Roomba when Away
        ##########################################################

- alias: Roomba - Run Roomba when Away

  trigger:
    - platform: state
      entity_id: binary_sensor.people_home
      from: 'on'
      to: 'off'
      for:
        hours: 0
        minutes: 30
        seconds: 0

  condition:
    - condition: state
      entity_id: input_boolean.disable_roomba
      state: 'off'
    - condition: state
      entity_id: input_boolean.roomba_ran
      state: 'off'
    - condition: time
      after: '10:00'
      before: '20:00'
    - condition: state
      entity_id: vacuum.roomba
      state: 'off'
    - condition: numeric_state
      entity_id: sensor.roomba_batt
      above: 99

  action:
    - service: vacuum.turn_on
      entity_id:
        - vacuum.roomba

        ##########################################################
        ## Shut Off Roombas when Home
        ##########################################################

- alias: Roomba - Shut Off Roomba when Home

  trigger:
    - platform: state
      entity_id: input_boolean.disable_roomba
      from: 'off'
      to: 'on'
      for:
        hours: 0
        minutes: 0
        seconds: 45

  condition:
    - condition: state
      entity_id: input_boolean.disable_roomba
      state: 'off'
    - condition: state
      entity_id: vacuum.roomba
      state: 'on'

  action:
    - service: vacuum.return_to_base
      entity_id:
        - vacuum.roomba

        ##########################################################
        ## Run Roomba Weekdays when not Home
        ##########################################################

- alias: Roomba - Run Roomba Weekdays when not Home

  trigger:
   - platform: time
     at: '13:00'

  condition:
    - condition: state
      entity_id: input_boolean.disable_roomba
      state: 'off'
    - condition: state
      entity_id: input_boolean.roomba_ran
      state: 'off'
    - condition: time
      weekday:
        - tue
        - wed
        - thu
        - fri
    - condition: state
      entity_id: vacuum.roomba
      state: 'off'
    - condition: state
      entity_id: binary_sensor.people_home
      state: 'off'
    - condition: numeric_state
      entity_id: sensor.roomba_batt
      above: 99

  action:
    - service: vacuum.turn_on
      entity_id:
        - vacuum.roomba

        ##########################################################
        ## Run Roomba Weekends
        ##########################################################

- alias: Roomba - Run Roomba Weekends

  trigger:
   - platform: time
     at: '17:00'

  condition:
    - condition: state
      entity_id: input_boolean.disable_roomba
      state: 'off'
    - condition: state
      entity_id: input_boolean.roomba_ran
      state: 'off'
    - condition: time
      weekday:
        - sat
        - sun
        - mon
    - condition: state
      entity_id: vacuum.roomba
      state: 'off'
    - condition: numeric_state
      entity_id: sensor.roomba_batt
      above: 99
    - condition: state
      entity_id: binary_sensor.people_home
      state: 'off'

  action:
    - service: vacuum.turn_on
      entity_id:
        - vacuum.roomba

        ##########################################################
        ## Turn off Roomba when House Guests Arrive
        ##########################################################

- alias: Roomba - Turn off Roomba when House Guests Arrive

  trigger:
    - platform: state
      entity_id: input_boolean.guest_mode
      from: 'off'
      to: 'on'

  condition:
    - condition: state
      entity_id: input_boolean.disable_roomba
      state: 'off'
    - condition: state
      entity_id: vacuum.roomba
      state: 'on'

  action:
    - service: vacuum.return_to_base
      entity_id:
        - vacuum.roomba

        ##########################################################
        ## Set Roomba has Ran for the Day
        ##########################################################

- alias: Roomba - Set Roomba has Ran for the Day

  trigger:
    - platform: state
      entity_id: vacuum.roomba
      from: 'off'
      to: 'on'
      for:
        hours: 0
        minutes: 40
        seconds: 0

  condition:
    condition: state
    entity_id: input_boolean.disable_roomba
    state: 'off'

  action:
    - service: homeassistant.turn_on
      entity_id:
        - input_boolean.roomba_ran

        ##########################################################
        ## Reset Roomba has ran for the day
        ##########################################################

- alias: Roomba - Reset Roomba has ran for the day

  trigger:
   - platform: time
     at: '00:01'

  action:
    - service: homeassistant.turn_off
      entity_id:
        - input_boolean.roomba_ran

        ##########################################################
        ## Roomba is Stuck Notification
        ##########################################################

- alias: Roomba - Stuck Notification

  trigger:
    - platform: template
      value_template: "{%if is_state_attr('vacuum.roomba', 'status', 'Stuck') %}true{%endif%}"

  condition:
    condition: state
    entity_id: input_boolean.disable_roomba
    state: 'off'

  action:
    - service: notify.html5_push
      data:
        data:
          renotify: 1
          icon: LOCALHOST_URL/local/icons/roomba.png
          badge: LOCALHOST_URL/local/icons/badge_roomba.png
          timestamp: '%m'
          url: LOCALHOST_URL/lovelace/6
          vibrate: 700, 700, 700
        message: "Roomba is stuck"
        title: "Send Help!"
        target:
          - "Gabes Mate"
          - "Macbook"
    - service: persistent_notification.create
      data:
        message: "Roomba is stuck"
        title: "Send Help!"

        ##########################################################
        ## Roomba is Full Notification
        ##########################################################

- alias: Roomba - Full Notification

  trigger:
    - platform: template
      value_template: "{%if is_state_attr('vacuum.roomba', 'bin_full', true) %}true{%endif%}"
  condition:
    condition: state
    entity_id: input_boolean.disable_roomba
    state: 'off'
  action:
    - service: notify.html5_push
      data:
        data:
          renotify: 1
          icon: LOCALHOST_URL/local/icons/dust.png
          badge: LOCALHOST_URL/local/icons/badge_roomba.png
          timestamp: '%m'
          url: LOCALHOST_URL/lovelace/6
          vibrate: 700, 700, 700
        message: "Roomba is full"
        title: "I ate too much!"
        target:
          - "Gabes Mate"
          - "Macbook"
    - service: persistent_notification.create
      data:
        message: "Roomba is full"
        title: "I ate too much!"